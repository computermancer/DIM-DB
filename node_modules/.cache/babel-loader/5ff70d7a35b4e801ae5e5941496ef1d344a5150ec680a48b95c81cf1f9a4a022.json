{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchDrills, updateDrill, deleteDrillById } from '../utils/drillOperations';\nexport const useDrillArchive = () => {\n  _s();\n  const [drills, setDrills] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [drillToDelete, setDrillToDelete] = useState(null);\n  const [editMode, setEditMode] = useState({});\n  const [editedDrill, setEditedDrill] = useState({});\n  const [toast, setToast] = useState({\n    show: false,\n    type: 'success',\n    message: ''\n  });\n  useEffect(() => {\n    loadDrills();\n  }, []);\n  const loadDrills = async () => {\n    try {\n      setLoading(true);\n      const data = await fetchDrills();\n      setDrills(data || []);\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleStartEdit = drill => {\n    setEditMode(prev => ({\n      ...prev,\n      [drill.id]: true\n    }));\n    setEditedDrill(prev => ({\n      ...prev,\n      [drill.id]: {\n        ...drill\n      }\n    }));\n  };\n  const handleCancelEdit = drillId => {\n    setEditMode(prev => ({\n      ...prev,\n      [drillId]: false\n    }));\n    setEditedDrill(prev => ({\n      ...prev,\n      [drillId]: undefined\n    }));\n  };\n  const handleFieldEdit = async (drillId, field, value) => {\n    try {\n      setLoading(true);\n      const updatedData = {\n        [field]: value\n      };\n      await updateDrill(drillId, updatedData);\n      setDrills(drills.map(drill => drill.id === drillId ? {\n        ...drill,\n        ...updatedData\n      } : drill));\n      setToast({\n        show: true,\n        type: 'success',\n        message: `${field.charAt(0).toUpperCase() + field.slice(1)} saved successfully`\n      });\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSaveEdit = async (drillId, data) => {\n    try {\n      setLoading(true);\n      await updateDrill(drillId, data);\n      setDrills(drills.map(drill => drill.id === drillId ? {\n        ...drill,\n        ...data\n      } : drill));\n      setToast({\n        show: true,\n        type: 'success',\n        message: 'Drill updated successfully'\n      });\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteDrill = drill => {\n    setDrillToDelete(drill);\n  };\n  const confirmDelete = async () => {\n    if (!drillToDelete) return;\n    try {\n      setLoading(true);\n      await deleteDrillById(drillToDelete.id);\n      setDrills(drills.filter(d => d.id !== drillToDelete.id));\n      setDrillToDelete(null);\n      setToast({\n        show: true,\n        type: 'success',\n        message: 'Drill deleted successfully'\n      });\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    drills,\n    loading,\n    error,\n    setDrillToDelete,\n    drillToDelete,\n    editMode,\n    editedDrill,\n    toast,\n    loadDrills,\n    handleStartEdit,\n    handleCancelEdit,\n    handleFieldEdit,\n    handleSaveEdit,\n    deleteDrill,\n    confirmDelete\n  };\n};\n_s(useDrillArchive, \"RwKy5R9v+aEscy8VHhAxkhGzGlo=\");","map":{"version":3,"names":["useState","useEffect","fetchDrills","updateDrill","deleteDrillById","useDrillArchive","_s","drills","setDrills","loading","setLoading","error","setError","drillToDelete","setDrillToDelete","editMode","setEditMode","editedDrill","setEditedDrill","toast","setToast","show","type","message","loadDrills","data","err","handleStartEdit","drill","prev","id","handleCancelEdit","drillId","undefined","handleFieldEdit","field","value","updatedData","map","charAt","toUpperCase","slice","handleSaveEdit","deleteDrill","confirmDelete","filter","d"],"sources":["C:/Users/bravo/Downloads/BIG-DIM/dim-drill-dashboard/src/hooks/useDrillArchive.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { fetchDrills, updateDrill, deleteDrillById } from '../utils/drillOperations';\n\nexport const useDrillArchive = () => {\n  const [drills, setDrills] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [drillToDelete, setDrillToDelete] = useState(null);\n  const [editMode, setEditMode] = useState({});\n  const [editedDrill, setEditedDrill] = useState({});\n  const [toast, setToast] = useState({\n    show: false,\n    type: 'success',\n    message: ''\n  });\n\n  useEffect(() => {\n    loadDrills();\n  }, []);\n\n  const loadDrills = async () => {\n    try {\n      setLoading(true);\n      const data = await fetchDrills();\n      setDrills(data || []);\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStartEdit = (drill) => {\n    setEditMode(prev => ({ ...prev, [drill.id]: true }));\n    setEditedDrill(prev => ({\n      ...prev,\n      [drill.id]: { ...drill }\n    }));\n  };\n\n  const handleCancelEdit = (drillId) => {\n    setEditMode(prev => ({ ...prev, [drillId]: false }));\n    setEditedDrill(prev => ({\n      ...prev,\n      [drillId]: undefined\n    }));\n  };\n\n  const handleFieldEdit = async (drillId, field, value) => {\n    try {\n      setLoading(true);\n      const updatedData = { [field]: value };\n      await updateDrill(drillId, updatedData);\n      \n      setDrills(drills.map(drill => \n        drill.id === drillId ? { ...drill, ...updatedData } : drill\n      ));\n      \n      setToast({\n        show: true,\n        type: 'success',\n        message: `${field.charAt(0).toUpperCase() + field.slice(1)} saved successfully`\n      });\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveEdit = async (drillId, data) => {\n    try {\n      setLoading(true);\n      await updateDrill(drillId, data);\n      \n      setDrills(drills.map(drill => \n        drill.id === drillId ? { ...drill, ...data } : drill\n      ));\n      \n      setToast({\n        show: true,\n        type: 'success',\n        message: 'Drill updated successfully'\n      });\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteDrill = (drill) => {\n    setDrillToDelete(drill);\n  };\n\n  const confirmDelete = async () => {\n    if (!drillToDelete) return;\n    \n    try {\n      setLoading(true);\n      await deleteDrillById(drillToDelete.id);\n      \n      setDrills(drills.filter(d => d.id !== drillToDelete.id));\n      setDrillToDelete(null);\n      \n      setToast({\n        show: true,\n        type: 'success',\n        message: 'Drill deleted successfully'\n      });\n    } catch (err) {\n      setError(err.message);\n      setToast({\n        show: true,\n        type: 'error',\n        message: err.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    drills,\n    loading,\n    error,\n    setDrillToDelete,\n    drillToDelete,\n    editMode,\n    editedDrill,\n    toast,\n    loadDrills,\n    handleStartEdit,\n    handleCancelEdit,\n    handleFieldEdit,\n    handleSaveEdit,\n    deleteDrill,\n    confirmDelete\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}